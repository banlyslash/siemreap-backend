// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id              String         @id @default(uuid())
  email           String         @unique
  password        String
  firstName       String         @map("first_name")
  lastName        String         @map("last_name")
  role            UserRole       @default(employee)
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  leaveRequests   LeaveRequest[] @relation("UserLeaveRequests")
  managedRequests LeaveRequest[] @relation("ManagerApprovals")
  hrApprovals     LeaveRequest[] @relation("HRApprovals")
  leaveBalances   LeaveBalance[]

  @@map("users")
}

// User roles
enum UserRole {
  hr
  manager
  employee
}

// Leave request model
model LeaveRequest {
  id              String             @id @default(uuid())
  userId          String             @map("user_id")
  user            User               @relation("UserLeaveRequests", fields: [userId], references: [id])
  leaveTypeId     String             @map("leave_type_id")
  leaveType       LeaveType          @relation(fields: [leaveTypeId], references: [id])
  startDate       DateTime           @map("start_date")
  endDate         DateTime           @map("end_date")
  halfDay         Boolean            @default(false) @map("half_day")
  reason          String?
  status          LeaveRequestStatus @default(pending)
  managerId       String?            @map("manager_id")
  manager         User?              @relation("ManagerApprovals", fields: [managerId], references: [id])
  managerComment  String?            @map("manager_comment")
  managerActionAt DateTime?          @map("manager_action_at")
  hrId            String?            @map("hr_id")
  hr              User?              @relation("HRApprovals", fields: [hrId], references: [id])
  hrComment       String?            @map("hr_comment")
  hrActionAt      DateTime?          @map("hr_action_at")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")

  @@index([userId])
  @@index([managerId])
  @@index([hrId])
  @@index([leaveTypeId])
  @@index([status])
  @@map("leave_requests")
}

// Leave request status
enum LeaveRequestStatus {
  pending
  manager_approved
  manager_rejected
  hr_approved
  hr_rejected
  cancelled
}

// Leave type model
model LeaveType {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?
  color         String         @default("#3498db") // Default color for calendar
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  leaveRequests LeaveRequest[]
  leaveBalances LeaveBalance[]

  @@map("leave_types")
}

// Leave balance model
model LeaveBalance {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])
  leaveTypeId String    @map("leave_type_id")
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id])
  year        Int
  allocated   Float
  used        Float     @default(0)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@unique([userId, leaveTypeId, year])
  @@index([userId])
  @@index([leaveTypeId])
  @@map("leave_balances")
}

// Holiday calendar
model Holiday {
  id          String   @id @default(uuid())
  name        String
  date        DateTime
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([date])
  @@index([date])
  @@map("holidays")
}
